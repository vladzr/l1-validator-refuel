name: Validator Refuel

on:
  workflow_dispatch:
  schedule:
    - cron: '0 5 * * *'
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  refuel-testnet:
    name: Testnet Refuel
    runs-on: ubuntu-latest
    environment: Testnet
    timeout-minutes: 15

    env:
      CHAIN_ID: '13337'
      DELAY_PCHAIN_TX: '5000'
      DELAY_VALIDATOR: '1000'
      BALANCE_THRESHOLD: '0.1'
      REFILL_AMOUNT: '0.2'
      UPTIME_THRESHOLD: '80'
      USE_UPTIME_FILTER: 'true'
      UPTIME_API: 'https://nodes.testnet.onbeam.com/api/uptime'
      RPC_PCHAIN: ${{ secrets.RPC_PCHAIN }}
      FAUCET_PK: ${{ secrets.FAUCET_PK }}
      FAUCET_PCHAIN_ADDRESS: ${{ vars.FAUCET_PCHAIN_ADDRESS }}
      NODE_ENV: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Set up PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.4

      - name: Cache PNPM store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prod=false

      - name: Verify dependencies
        run: pnpm list --dev

      - name: Build project
        run: pnpm build

      - name: Run testnet refuel
        run: |
          set -e
          log_file="refuel-testnet-$(date +%Y%m%d-%H%M%S).log"

          echo "Using UPTIME_API=$UPTIME_API"
          echo "Using RPC_PCHAIN=$RPC_PCHAIN"

          pnpm local 2>&1 | tee "$log_file"
          echo "LOG_FILE=$log_file" >> $GITHUB_ENV

      - name: Upload testnet log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: refuel-testnet-log
          path: ${{ env.LOG_FILE }}
          retention-days: 7

      - name: Set notification time
        run: echo "NOTIFICATION_TIME=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV

      - name: Parse log for summary
        if: always()
        run: |
          if [ -f "${{ env.LOG_FILE }}" ]; then
            errors=$(grep -i -E "error|failed" "${{ env.LOG_FILE }}" | head -n 5 || echo "No errors found")
            echo "LOG_SUMMARY=Errors (first 5 lines):\n$errors" >> $GITHUB_ENV
          else
            echo "LOG_SUMMARY=No log file found" >> $GITHUB_ENV
          fi

      - name: Send Slack notification
        if: always()
        uses: slackapi/slack-github-action@v2
        with:
          webhook-type: incoming-webhook
          payload: |
            {
              "text": "*Testnet Refuel Job*\nStatus: ${{ job.status }}\nRepository: ${{ github.repository }}\nRun: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run and Artifacts>\nCommit: <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }} - ${{ github.event.head_commit.message || github.event.pull_request.title }}>\nTrigger: ${{ github.event_name }}\nLog Artifact: ${{ env.LOG_FILE }} (download from run page)\nTime: ${{ env.NOTIFICATION_TIME }}\n${{ env.LOG_SUMMARY }}",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Testnet Refuel Job"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Status:*\n${{ job.status }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Trigger:*\n${{ github.event_name }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Repository:*\n${{ github.repository }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Log Artifact:*\n${{ env.LOG_FILE }} (download from run page)"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Run:*\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run and Artifacts>"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Commit:*\n<${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }} - ${{ github.event.head_commit.message || github.event.pull_request.title }}>"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Time:*\n${{ env.NOTIFICATION_TIME }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Log Summary:*\n${{ env.LOG_SUMMARY }}"
                  }
                }
              ],
              "color": "${{ job.status == 'success' && '#2ECC71' || job.status == 'failure' && '#E74C3C' || '#F1C40F' }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  refuel-mainnet:
    name: Mainnet Refuel
    runs-on: ubuntu-latest
    environment: Mainnet
    timeout-minutes: 15

    env:
      CHAIN_ID: '4337'
      DELAY_PCHAIN_TX: '5000'
      BALANCE_THRESHOLD: '0.2'
      REFILL_AMOUNT: '0.4'
      UPTIME_THRESHOLD: '80'
      USE_UPTIME_FILTER: 'false'
      UPTIME_API: 'https://nodes.onbeam.com/api/uptime'
      FAUCET_BALANCE_WARN: '250'
      FAUCET_BALANCE_ERROR: '10'
      RPC_PCHAIN: ${{ secrets.RPC_PCHAIN }}
      FAUCET_PK: ${{ secrets.FAUCET_PK }}
      FAUCET_PCHAIN_ADDRESS: ${{ vars.FAUCET_PCHAIN_ADDRESS }}
      NODE_ENV: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Set up PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.4

      - name: Cache PNPM store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prod=false

      - name: Verify dependencies
        run: pnpm list --dev

      - name: Build project
        run: pnpm build

      - name: Run mainnet refuel
        run: |
          set -e
          log_file="refuel-mainnet-$(date +%Y%m%d-%H%M%S).log"

          echo "Using UPTIME_API=$UPTIME_API"
          echo "Using RPC_PCHAIN=$RPC_PCHAIN"

          pnpm local 2>&1 | tee "$log_file"
          echo "LOG_FILE=$log_file" >> $GITHUB_ENV

      - name: Upload mainnet log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: refuel-mainnet-log
          path: ${{ env.LOG_FILE }}
          retention-days: 7

      - name: Set notification time
        run: echo "NOTIFICATION_TIME=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV

      - name: Parse log for summary
        if: always()
        run: |
          if [ -f "${{ env.LOG_FILE }}" ]; then
            errors=$(grep -i -E "error|failed" "${{ env.LOG_FILE }}" | head -n 5 || echo "No errors found")
            echo "LOG_SUMMARY=Errors (first 5 lines):\n$errors" >> $GITHUB_ENV
          else
            echo "LOG_SUMMARY=No log file found" >> $GITHUB_ENV
          fi

      - name: Send Slack notification
        if: always()
        uses: slackapi/slack-github-action@v2
        with:
          webhook-type: incoming-webhook
          payload: |
            {
              "text": "*Mainnet Refuel Job*\nStatus: ${{ job.status }}\nRepository: ${{ github.repository }}\nRun: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run and Artifacts>\nCommit: <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }} - ${{ github.event.head_commit.message || github.event.pull_request.title }}>\nTrigger: ${{ github.event_name }}\nLog Artifact: ${{ env.LOG_FILE }} (download from run page)\nTime: ${{ env.NOTIFICATION_TIME }}\n${{ env.LOG_SUMMARY }}",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Mainnet Refuel Job"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Status:*\n${{ job.status }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Trigger:*\n${{ github.event_name }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Repository:*\n${{ github.repository }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Log Artifact:*\n${{ env.LOG_FILE }} (download from run page)"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Run:*\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run and Artifacts>"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Commit:*\n<${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }} - ${{ github.event.head_commit.message || github.event.pull_request.title }}>"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Time:*\n${{ env.NOTIFICATION_TIME }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Log Summary:*\n${{ env.LOG_SUMMARY }}"
                  }
                }
              ],
              "color": "${{ job.status == 'success' && '#2ECC71' || job.status == 'failure' && '#E74C3C' || '#F1C40F' }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
