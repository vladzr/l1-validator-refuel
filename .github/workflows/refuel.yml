name: Validator Refuel

on:
  workflow_dispatch:
  schedule:
    - cron: '0 5 * * *'
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  refuel-testnet:
    name: Testnet Refuel
    runs-on: ubuntu-latest
    environment: Testnet
    timeout-minutes: 15

    env:
      CHAIN_ID: '13337'
      DELAY_PCHAIN_TX: '5000'
      DELAY_VALIDATOR: '1000'
      BALANCE_THRESHOLD: '0.3'
      REFILL_AMOUNT: '0.2'
      UPTIME_THRESHOLD: '80'
      USE_UPTIME_FILTER: 'true'
      RPC_EVM: ${{ secrets.RPC_EVM }}
      RPC_PCHAIN: ${{ secrets.RPC_PCHAIN }}
      FAUCET_PK: ${{ secrets.FAUCET_PK }}
      FAUCET_PCHAIN_ADDRESS: ${{ vars.FAUCET_PCHAIN_ADDRESS }}
      NODE_ENV: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Set up PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.4

      - name: Cache PNPM store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prod=false

      - name: Verify dependencies
        run: pnpm list --dev

      - name: Build project
        run: pnpm build

      - name: Run testnet refuel
        shell: bash
        run: |
          set -eo pipefail
          log_file="refuel-testnet-$(date +%Y%m%d-%H%M%S).log"
          echo "LOG_FILE=$log_file" >> "$GITHUB_ENV"
          : > "$log_file"  # pre-create so later steps always have a file

          # Don't leak secrets; just indicate presence
          [[ -n "$RPC_EVM" ]] && echo "RPC_EVM: present" || echo "RPC_EVM: MISSING"
          [[ -n "$RPC_PCHAIN" ]] && echo "RPC_PCHAIN: present" || echo "RPC_PCHAIN: MISSING"

          pnpm local 2>&1 | tee -a "$log_file"

      - name: Upload testnet log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: refuel-testnet-log
          path: ${{ env.LOG_FILE }}
          if-no-files-found: ignore
          retention-days: 7

      - name: Set notification time
        shell: bash
        run: echo "NOTIFICATION_TIME=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> "$GITHUB_ENV"

      - name: Parse log for summary
        if: always()
        shell: bash
        run: |
          if [ -n "${{ env.LOG_FILE }}" ] && [ -f "${{ env.LOG_FILE }}" ]; then
            # Summary (first 5 lines)
            summary="$(grep -i -E 'error|failed' "${{ env.LOG_FILE }}" | head -n 5 || true)"
            [ -z "$summary" ] && summary="No errors found"

            # Count total errors to decide Slack routing
            error_count="$(grep -ci -E 'error|failed' "${{ env.LOG_FILE }}" || true)"
            echo "ERROR_COUNT=${error_count}" >> "$GITHUB_ENV"
            if [ "${error_count}" -gt 0 ]; then
              echo "HAS_ERRORS=true" >> "$GITHUB_ENV"
            else
              echo "HAS_ERRORS=false" >> "$GITHUB_ENV"
            fi

            {
              echo 'LOG_SUMMARY<<EOF'
              echo 'Errors (first 5 lines):'
              echo "$summary"
              echo 'EOF'
            } >> "$GITHUB_ENV"
          else
            echo 'LOG_SUMMARY=No log file found' >> "$GITHUB_ENV"
            echo 'HAS_ERRORS=true' >> "$GITHUB_ENV"   # treat missing log as error
            echo 'ERROR_COUNT=1' >> "$GITHUB_ENV"
          fi

      - name: Prepare Slack-safe summary
        if: always()
        shell: bash
        run: |
          summary="${LOG_SUMMARY:-No log summary available}"

          summary="${summary//\\/\\\\}"    # \  -> \\
          summary="${summary//\"/\\\"}"    # "  -> \"
          summary="${summary//\`/\\\`}"    # `  -> \`
          summary="${summary//$'\r'/}"     # drop CR if any
          summary="${summary//$'\n'/\\n}"  # NL -> \n

          max=3000
          if [ ${#summary} -gt $max ]; then
            summary="${summary:0:$max}…"
          fi

          {
            echo 'LOG_SUMMARY_SLACK<<EOF'
            printf '%s\n' "$summary"
            echo 'EOF'
          } >> "$GITHUB_ENV"

      - name: Send Slack success (detailed)
        if: always() && env.HAS_ERRORS != 'true' && !failure() && !cancelled()
        uses: slackapi/slack-github-action@v2
        with:
          webhook-type: incoming-webhook
          payload: |
            {
              "text": ":white_check_mark: ${{ job.name }} Success",
              "unfurl_links": false,
              "blocks": [
                {
                  "type": "header",
                  "text": { "type": "plain_text", "text": "${{ job.name }} Success" }
                },
                {
                  "type": "section",
                  "fields": [
                    { "type": "mrkdwn", "text": "*Status:*\nsuccess" },
                    { "type": "mrkdwn", "text": "*Trigger:*\n${{ github.event_name }}" }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    { "type": "mrkdwn", "text": "*Repository:*\n${{ github.repository }}" },
                    { "type": "mrkdwn", "text": "*Chain ID:*\n${{ env.CHAIN_ID }}" }
                  ]
                },
                {
                  "type": "section",
                  "text": { "type": "mrkdwn", "text": "*Run:*\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run and Artifacts>" }
                },
                {
                  "type": "section",
                  "text": { "type": "mrkdwn", "text": "*Commit:*\n<${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }} - ${{ github.event.head_commit.message || github.event.pull_request.title }}>" }
                },
                {
                  "type": "context",
                  "elements": [
                    { "type": "mrkdwn", "text": "*Time:* ${{ env.NOTIFICATION_TIME }}" }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send Slack failure (detailed)
        if: always() && (env.HAS_ERRORS == 'true' || failure() || cancelled())
        uses: slackapi/slack-github-action@v2
        with:
          webhook-type: incoming-webhook
          payload: |
            {
              "text": ":x: ${{ job.name }} Failed — see details below",
              "unfurl_links": false,
              "blocks": [
                {
                  "type": "header",
                  "text": { "type": "plain_text", "text": "${{ job.name }} Failure" }
                },
                {
                  "type": "section",
                  "fields": [
                    { "type": "mrkdwn", "text": "*Status:*\n${{ job.status }}" },
                    { "type": "mrkdwn", "text": "*Trigger:*\n${{ github.event_name }}" }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    { "type": "mrkdwn", "text": "*Repository:*\n${{ github.repository }}" },
                    { "type": "mrkdwn", "text": "*Chain ID:*\n${{ env.CHAIN_ID }}" }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    { "type": "mrkdwn", "text": "*Errors found:*\n${{ env.ERROR_COUNT || 0 }}" },
                    { "type": "mrkdwn", "text": "*Log Artifact:*\n`${{ env.LOG_FILE }}`" }
                  ]
                },
                {
                  "type": "section",
                  "text": { "type": "mrkdwn", "text": "*Run:*\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run and Artifacts>" }
                },
                {
                  "type": "section",
                  "text": { "type": "mrkdwn", "text": "*Commit:*\n<${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }} - ${{ github.event.head_commit.message || github.event.pull_request.title }}>" }
                },
                {
                  "type": "context",
                  "elements": [
                    { "type": "mrkdwn", "text": "*Time:* ${{ env.NOTIFICATION_TIME }}" }
                  ]
                },
                { "type": "divider" },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Log Summary (first lines):*\n```${{ env.LOG_SUMMARY_SLACK }}```"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  refuel-mainnet:
    name: Mainnet Refuel
    runs-on: ubuntu-latest
    environment: Mainnet
    timeout-minutes: 15

    env:
      CHAIN_ID: '4337'
      DELAY_PCHAIN_TX: '5000'
      BALANCE_THRESHOLD: '0.3'
      REFILL_AMOUNT: '0.4'
      UPTIME_THRESHOLD: '80'
      USE_UPTIME_FILTER: 'false'
      FAUCET_BALANCE_WARN: '250'
      FAUCET_BALANCE_ERROR: '10'
      RPC_EVM: ${{ secrets.RPC_EVM }}
      RPC_PCHAIN: ${{ secrets.RPC_PCHAIN }}
      FAUCET_PK: ${{ secrets.FAUCET_PK }}
      FAUCET_PCHAIN_ADDRESS: ${{ vars.FAUCET_PCHAIN_ADDRESS }}
      NODE_ENV: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Set up PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.4

      - name: Cache PNPM store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prod=false

      - name: Verify dependencies
        run: pnpm list --dev

      - name: Build project
        run: pnpm build

      - name: Run mainnet refuel
        shell: bash
        run: |
          set -eo pipefail
          log_file="refuel-mainnet-$(date +%Y%m%d-%H%M%S).log"
          echo "LOG_FILE=$log_file" >> "$GITHUB_ENV"
          : > "$log_file"

          [[ -n "$RPC_EVM" ]] && echo "RPC_EVM: present" || echo "RPC_EVM: MISSING"
          [[ -n "$RPC_PCHAIN" ]] && echo "RPC_PCHAIN: present" || echo "RPC_PCHAIN: MISSING"

          pnpm local 2>&1 | tee -a "$log_file"

      - name: Upload mainnet log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: refuel-mainnet-log
          path: ${{ env.LOG_FILE }}
          if-no-files-found: ignore
          retention-days: 7

      - name: Set notification time
        shell: bash
        run: echo "NOTIFICATION_TIME=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> "$GITHUB_ENV"

      - name: Parse log for summary
        if: always()
        shell: bash
        run: |
          if [ -n "${{ env.LOG_FILE }}" ] && [ -f "${{ env.LOG_FILE }}" ]; then
            summary="$(grep -i -E 'error|failed' "${{ env.LOG_FILE }}" | head -n 5 || true)"
            [ -z "$summary" ] && summary="No errors found"

            error_count="$(grep -ci -E 'error|failed' "${{ env.LOG_FILE }}" || true)"
            echo "ERROR_COUNT=${error_count}" >> "$GITHUB_ENV"
            if [ "${error_count}" -gt 0 ]; then
              echo "HAS_ERRORS=true" >> "$GITHUB_ENV"
            else
              echo "HAS_ERRORS=false" >> "$GITHUB_ENV"
            fi

            {
              echo 'LOG_SUMMARY<<EOF'
              echo 'Errors (first 5 lines):'
              echo "$summary"
              echo 'EOF'
            } >> "$GITHUB_ENV"
          else
            echo 'LOG_SUMMARY=No log file found' >> "$GITHUB_ENV"
            echo 'HAS_ERRORS=true' >> "$GITHUB_ENV"
            echo 'ERROR_COUNT=1' >> "$GITHUB_ENV"
          fi

      - name: Prepare Slack-safe summary
        if: always()
        shell: bash
        run: |
          summary="${LOG_SUMMARY:-No log summary available}"

          summary="${summary//\\/\\\\}"    # \  -> \\
          summary="${summary//\"/\\\"}"    # "  -> \"
          summary="${summary//\`/\\\`}"    # `  -> \`
          summary="${summary//$'\r'/}"     # drop CR if any
          summary="${summary//$'\n'/\\n}"  # NL -> \n

          max=3000
          if [ ${#summary} -gt $max ]; then
            summary="${summary:0:$max}…"
          fi

          {
            echo 'LOG_SUMMARY_SLACK<<EOF'
            printf '%s\n' "$summary"
            echo 'EOF'
          } >> "$GITHUB_ENV"

      - name: Send Slack success (detailed)
        if: always() && env.HAS_ERRORS != 'true' && !failure() && !cancelled()
        uses: slackapi/slack-github-action@v2
        with:
          webhook-type: incoming-webhook
          payload: |
            {
              "text": ":white_check_mark: ${{ job.name }} Success",
              "unfurl_links": false,
              "blocks": [
                {
                  "type": "header",
                  "text": { "type": "plain_text", "text": "${{ job.name }} Success" }
                },
                {
                  "type": "section",
                  "fields": [
                    { "type": "mrkdwn", "text": "*Status:*\nsuccess" },
                    { "type": "mrkdwn", "text": "*Trigger:*\n${{ github.event_name }}" }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    { "type": "mrkdwn", "text": "*Repository:*\n${{ github.repository }}" },
                    { "type": "mrkdwn", "text": "*Chain ID:*\n${{ env.CHAIN_ID }}" }
                  ]
                },
                {
                  "type": "section",
                  "text": { "type": "mrkdwn", "text": "*Run:*\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run and Artifacts>" }
                },
                {
                  "type": "section",
                  "text": { "type": "mrkdwn", "text": "*Commit:*\n<${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }} - ${{ github.event.head_commit.message || github.event.pull_request.title }}>" }
                },
                {
                  "type": "context",
                  "elements": [
                    { "type": "mrkdwn", "text": "*Time:* ${{ env.NOTIFICATION_TIME }}" }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send Slack failure (detailed)
        if: always() && (env.HAS_ERRORS == 'true' || failure() || cancelled())
        uses: slackapi/slack-github-action@v2
        with:
          webhook-type: incoming-webhook
          payload: |
            {
              "text": ":x: ${{ job.name }} Failed — see details below",
              "unfurl_links": false,
              "blocks": [
                {
                  "type": "header",
                  "text": { "type": "plain_text", "text": "${{ job.name }} Failure" }
                },
                {
                  "type": "section",
                  "fields": [
                    { "type": "mrkdwn", "text": "*Status:*\n${{ job.status }}" },
                    { "type": "mrkdwn", "text": "*Trigger:*\n${{ github.event_name }}" }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    { "type": "mrkdwn", "text": "*Repository:*\n${{ github.repository }}" },
                    { "type": "mrkdwn", "text": "*Chain ID:*\n${{ env.CHAIN_ID }}" }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    { "type": "mrkdwn", "text": "*Errors found:*\n${{ env.ERROR_COUNT || 0 }}" },
                    { "type": "mrkdwn", "text": "*Log Artifact:*\n`${{ env.LOG_FILE }}`" }
                  ]
                },
                {
                  "type": "section",
                  "text": { "type": "mrkdwn", "text": "*Run:*\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run and Artifacts>" }
                },
                {
                  "type": "section",
                  "text": { "type": "mrkdwn", "text": "*Commit:*\n<${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }} - ${{ github.event.head_commit.message || github.event.pull_request.title }}>" }
                },
                {
                  "type": "context",
                  "elements": [
                    { "type": "mrkdwn", "text": "*Time:* ${{ env.NOTIFICATION_TIME }}" }
                  ]
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Log Summary (first lines):*\n```${
                      {LOG_SUMMARY_SLACK}
                    }```"
                  }
                }
              ]
            }
        env:
          # Inject the preprocessed, truncated summary via env so we don't blow up JSON/YAML parsing
          LOG_SUMMARY_SLACK: ${{ env.LOG_SUMMARY_SLACK }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
